// This file was generated by Mendix Modeler.
//
// WARNING: Only the following code will be retained when actions are regenerated:
// - the import list
// - the code between BEGIN USER CODE and END USER CODE
// - the code between BEGIN EXTRA CODE and END EXTRA CODE
// Other code you write will be lost the next time you deploy the project.
// Special characters, e.g., é, ö, à, etc. are supported in comments.

package pdf_exporter.actions;

import java.io.File;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.io.InputStream;
import java.util.Date;
import org.apache.pdfbox.pdmodel.PDDocument;
import pdf_exporter.lib.PDFInjector;
import com.mendix.core.Core;
import com.mendix.systemwideinterfaces.core.IContext;
import com.mendix.webui.CustomJavaAction;
import com.mendix.systemwideinterfaces.core.IMendixObject;

/**
 * Takes a list of PDF_Fields and applies them to the source PDF file.
 * 
 * You must copy your source PDF_Form into an object of type PDF_FieldNamesFilled and then pass that into the action. The results of this action will be stored in that object.
 */
public class BuildPDF extends CustomJavaAction<Boolean>
{
	private java.util.List<IMendixObject> __PDF_FieldList;
	private java.util.List<pdf_exporter.proxies.PDFField> PDF_FieldList;
	private IMendixObject __PDF_BlankForm;
	private pdf_exporter.proxies.PDFDocument PDF_BlankForm;
	private IMendixObject __PDF_FormToComplete;
	private pdf_exporter.proxies.PDFDocument PDF_FormToComplete;
	private Boolean Editable;
	private Boolean PopulateFields;

	public BuildPDF(IContext context, java.util.List<IMendixObject> PDF_FieldList, IMendixObject PDF_BlankForm, IMendixObject PDF_FormToComplete, Boolean Editable, Boolean PopulateFields)
	{
		super(context);
		this.__PDF_FieldList = PDF_FieldList;
		this.__PDF_BlankForm = PDF_BlankForm;
		this.__PDF_FormToComplete = PDF_FormToComplete;
		this.Editable = Editable;
		this.PopulateFields = PopulateFields;
	}

	@Override
	public Boolean executeAction() throws Exception
	{
		this.PDF_FieldList = new java.util.ArrayList<pdf_exporter.proxies.PDFField>();
		if (__PDF_FieldList != null)
			for (IMendixObject __PDF_FieldListElement : __PDF_FieldList)
				this.PDF_FieldList.add(pdf_exporter.proxies.PDFField.initialize(getContext(), __PDF_FieldListElement));

		this.PDF_BlankForm = __PDF_BlankForm == null ? null : pdf_exporter.proxies.PDFDocument.initialize(getContext(), __PDF_BlankForm);

		this.PDF_FormToComplete = __PDF_FormToComplete == null ? null : pdf_exporter.proxies.PDFDocument.initialize(getContext(), __PDF_FormToComplete);

		// BEGIN USER CODE
		
		File pdfFileIn = getFileFromFileDocument(PDF_BlankForm.getMendixObject());
		PDDocument pdfDoc = PDDocument.load(pdfFileIn);
		PDDocument outputDoc = PDFInjector.setFieldList(pdfDoc, PDF_FieldList, !this.Editable, this.PopulateFields);
		
		//Get the file object that will contain the ouput pdfDoc
		File pdfFileOut = getFileFromFileDocument(PDF_FormToComplete.getMendixObject());
		//Put the outputDoc into the pdf file
		outputDoc.save(pdfFileOut);
		
		//Update the Mendix object with our updated pdf file
		setFileInFileDocument(pdfFileOut, PDF_FormToComplete.getMendixObject());
		pdfDoc.close();
		outputDoc.close();

		return true;
		// END USER CODE
	}

	/**
	 * Returns a string representation of this action
	 */
	@Override
	public String toString()
	{
		return "BuildPDF";
	}

	// BEGIN EXTRA CODE
		private File getFileFromFileDocument(IMendixObject fileDocument) 
		{
			File fileToPull = new File( Core.getConfiguration().getTempPath().getAbsolutePath()+"/RandomFileName" + (new Date()).getTime()+ ".pdf" );
			try {
				InputStream stream = Core.getFileDocumentContent(getContext(), fileDocument);
				FileOutputStream outputStream = new FileOutputStream( fileToPull );
	 
				int read = 0;
				byte[] bytes = new byte[1024];
		 
				while ((read = stream.read(bytes)) != -1) {
					outputStream.write(bytes, 0, read);
				}
				outputStream.flush();
				outputStream.close();
			} catch (Exception e) {}	
			
			return fileToPull;
			
		}
		private void setFileInFileDocument(File f, IMendixObject fileDocument) 
		{
			try {
				FileInputStream storeStream = new FileInputStream(f);
				Core.storeFileDocumentContent(this.getContext(), fileDocument, f.getName(), storeStream);
			} 
			catch (Exception e) {System.out.println(e);}
			
		}
	// END EXTRA CODE
}
