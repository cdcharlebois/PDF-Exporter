// This file was generated by Mendix Modeler.
//
// WARNING: Only the following code will be retained when actions are regenerated:
// - the import list
// - the code between BEGIN USER CODE and END USER CODE
// - the code between BEGIN EXTRA CODE and END EXTRA CODE
// Other code you write will be lost the next time you deploy the project.
// Special characters, e.g., é, ö, à, etc. are supported in comments.

package pdf_exporter.actions;

import java.text.DecimalFormat;
import java.text.NumberFormat;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.List;
import simpleordermodule.proxies.Order.MemberNames;
import mxmodelreflection.proxies.MxObjectReference;
import com.mendix.core.Core;
import com.mendix.core.CoreException;
import com.mendix.core.objectmanagement.member.MendixObjectReference;
import com.mendix.systemwideinterfaces.core.IContext;
import com.mendix.systemwideinterfaces.core.IMendixIdentifier;
import com.mendix.webui.CustomJavaAction;
import com.mendix.systemwideinterfaces.core.IMendixObject;

/**
 * Given a mapping path (MxXPath entities) and an input object, this action will traverse the mapping to retrieve the identified attribute value and return it as a string.
 */
public class RetrieveAttributeValueByPath extends CustomJavaAction<String>
{
	private IMendixObject inputEntity;
	private IMendixObject __xPath;
	private pdf_exporter.proxies.MxXPath xPath;

	public RetrieveAttributeValueByPath(IContext context, IMendixObject inputEntity, IMendixObject xPath)
	{
		super(context);
		this.inputEntity = inputEntity;
		this.__xPath = xPath;
	}

	@Override
	public String executeAction() throws Exception
	{
		this.xPath = __xPath == null ? null : pdf_exporter.proxies.MxXPath.initialize(getContext(), __xPath);

		// BEGIN USER CODE
		return xPathRecurse(xPath, inputEntity);
		// END USER CODE
	}

	/**
	 * Returns a string representation of this action
	 */
	@Override
	public String toString()
	{
		return "RetrieveAttributeValueByPath";
	}

	// BEGIN EXTRA CODE
	private String xPathRecurse(pdf_exporter.proxies.MxXPath curXPath, IMendixObject curEntity) throws CoreException 
	{
		String sourceEntityName  = curEntity.getMetaObject().getName();

		//if the XPath object indicates that we just need to look at the current entity, then grab the value of the attribute selected.
		if (curXPath.getRetrieveType() == pdf_exporter.proxies.RetrieveAction.Attribute) {
			String targetAttributeName = curXPath.getMxXPath_MxObjectMember().getAttributeName();
			
			try {
				Object o = curEntity.getValue(getContext(),targetAttributeName);
				//handles string and enum
				if (o instanceof String)
				{
					return (String)o;
				}
				//handles Double, Decimal, Currency
				//TODO: custom number formatting
				else if (o instanceof Double) 
				{
					NumberFormat formatter = new DecimalFormat(curXPath.getNumberFormat()); 
					double d = ((Double)o).doubleValue();
					return formatter.format(d);
				}
				//handles Dates 
				//TODO: timezone handling
				else if (o instanceof Date)
				{
					SimpleDateFormat dt = new SimpleDateFormat(curXPath.getDateFormat());
					Date d = (Date)o;
					return dt.format(d);
				}
				else if (o instanceof Integer) 
				{
					return ((Integer)o).toString();
				}
				else if (o instanceof Long)
				{
					return ((Long)o).toString();
				}
				else if (o instanceof Boolean)
				{
					Boolean b = (Boolean)o;
					if(b)
					{
						return curXPath.getBooleanTrue();
					}
					else
					{
						return curXPath.getBooleanFalse();
					}
				}
				else return o.toString();
			} catch (Exception e) 
			{
				throw new CoreException("Could not populate the selected attribute: " + targetAttributeName + " on the entity: " + sourceEntityName + "\nNested error: " + e.getMessage());
			}
		}
		else {
			/*if the XPath object indicates that we need to follow an association:
			 *   - Get the name of the association
			 *   - Follow it and get the new object
			 *   - Get the child mxXpath object 
			 *   - Recurse on the resulting objects.
			 */
			String targetReferenceName = curXPath.getMxXPath_MxObjectReference().getCompleteName();
			
			try {
				//follow the association specified and get the next entity
				IMendixIdentifier identifier = curEntity.getValue(getContext(), targetReferenceName);
				IMendixObject nextEntity = Core.retrieveId(getContext(), identifier);
				
				return xPathRecurse(curXPath.getMxXPath_ParentMxXPath(), nextEntity);
			} catch (Exception e) 
			{
				throw new CoreException("Could not find the selected reference: " + targetReferenceName + " on the entity: " + sourceEntityName);
			}
		}
	}
	// END EXTRA CODE
}
